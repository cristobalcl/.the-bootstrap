""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theme
colorscheme kalisi
"colorscheme BusyBee

"colorscheme solarized
"let g:solarized_termcolors=256

set background=dark

" highlight Conceal guifg=#ff0000 guibg=#00ff00

" let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1

" map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
"             \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
"             \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Session and configuration
"set sessionoptions+=buffers,curdir,folds,tabpages
set sessionoptions-=blank,help

" No redraw all the time
set lazyredraw

" Reload vim configuration
nnoremap <Leader>v :source $MYVIMRC<CR>

" Shell
set shell=/usr/bin/fish
set autochdir

" Experimental: use '-' for commands.
nnoremap - :

" Disable F1 key
inoremap <F1> <Nop>
nnoremap <F1> <Nop>
vnoremap <F1> <Nop>

" unmap <TAB>

" Wild menu
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildmenu
set wildmode=list:longest,full

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Cursor, line numbers and navigation
set cursorline                           " Highlight cursor line
" Switch cursor line
nmap <leader>l :set cursorline!<CR>
" Always see next 3 lines
set scrolloff=3

set relativenumber                       " Relative line numbers
" Remove line numbers
nmap <leader>n :set number!<CR>
" Switch relative line numbers
nmap <leader>r :set relativenumber!<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Indent & syntax
" Show existing tab with 4 spaces width
set tabstop=4
" When indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/UltiSnips', 'UltiSnips']

" NCM2 ----------------------------
if has('nvim')
    " enable ncm2 for all buffers
    autocmd BufEnter * call ncm2#enable_for_buffer()

    " IMPORTANTE: :help Ncm2PopupOpen for more information
    set completeopt=noinsert,menuone,noselect

    set shortmess+=c
    inoremap <c-c> <ESC>
    " make it fast
    let ncm2#popup_delay = 5
    let ncm2#complete_length = [[1, 1]]
    " Use new fuzzy based matches
    let g:ncm2#matcher = 'substrfuzzy'

    " Disable Jedi autocompletion
    let g:jedi#auto_initialization = 1
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#smart_auto_mappings = 0
    let g:jedi#popup_on_dot = 0
    let g:jedi#completions_command = ""
    let g:jedi#show_call_signatures = "1"
endif
" ---------------------------------

" Bash (disable fi -> if)
autocmd FileType sh silent! unabbreviate fi

" Markdown
augroup vimrc-markdown
  autocmd!
  autocmd FileType markdown setlocal wrap wm=2 textwidth=80 fo+=t
augroup END

" Python (disable vim-bootstrap config)
augroup vimrc-python
  autocmd!
  autocmd FileType python setlocal iskeyword-=.,#
augroup END

" TypeScript
augroup vimrc-typescript
  autocmd!
  autocmd FileType typescript setlocal shiftwidth=2 tabstop=2 softtabstop=2 expandtab iskeyword-=.,#
augroup END

" Javascript
autocmd FileType javascript setlocal iskeyword-=.,#

" Jenkinsfile
autocmd FileType Jenkinsfile setlocal textwidth=0 wrapmargin=0

let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [], 'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" Center line
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>

" Wrap lines
nnoremap <Leader>wr gqG

if has('nvim')
	tnoremap <A-Left> <C-\><C-n><C-w>h
	tnoremap <A-Down> <C-\><C-n><C-w>j
	tnoremap <A-Up> <C-\><C-n><C-w>k
	tnoremap <A-Right> <C-\><C-n><C-w>l
endif
nnoremap <A-Left> <C-w>h
nnoremap <A-Down> <C-w>j
nnoremap <A-Up> <C-w>k
nnoremap <A-Right> <C-w>l

" Move tabs
nnoremap <silent> <A-PageUp> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
" Move tabs
nnoremap <silent> <A-PageDown> :execute 'silent! tabmove ' . tabpagenr()<CR>
" Create tab
nmap <C-t> :tabnew<CR>
" Create tab
imap <C-t> <Esc>:tabnew<CR>

nmap <Leader>vv <C-w>t<C-w>H
nmap <Leader>hh <C-w>t<C-w>K

" Hihglight long lines
highlight ColorColumn ctermbg=237 guibg=#2c2d27
" highlight ColorColumn ctermbg=239 guibg=#2c2d27
" highlight ColorColumn ctermbg=240 guibg=#2c2d27
call matchadd('ColorColumn', '\%81v', -1)
" let &colorcolumn=join(range(120,999),",")
let &colorcolumn=join(range(81,999),",")
" let &colorcolumn="80,".join(range(120,999),",")

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search and visualization
set showmatch
set hlsearch                            " Highligh search result
set incsearch                           " Incremental search
set ignorecase                          " Ignore case
set smartcase                           " Smartcase
" Clear search highlight
nmap <leader>s :nohlsearch<CR>

" Show special characters
"set list
nmap <leader>c :set list!<CR>
set listchars=tab:▸.,trail:.,extends:…,nbsp:.,eol:¬
"highlight NonText ctermfg=8 ctermbg=0          " Invisible character colors
"highlight SpecialKey ctermfg=8 ctermbg=0
match ErrorMsg /\s\+$/                  " Highlight spaces at the end of the line

" Clear signs columns (Neomake errors,...)
noremap <silent> <leader>cls :sign unplace *<CR>:set signcolumn=auto<CR>

" For yapf plugin
autocmd FileType python nnoremap <LocalLeader>= :0,$!yapf<CR>

" http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap <leader>z :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Edition
" Repeat last action and move to the beginning of the edition
map . .`[

" Disable vim-boostrap mapping
"unmap P

" Copy&Paste from clipboard
set clipboard+=unnamedplus

" Paste yank
vnoremap <leader>p "0p

" Run macro 'q'
nnoremap QQ @q

" Switch paste mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set noshowmode

" Insert at the beginning of previous line
nnoremap gi kI
" Insert in a lonely line before or after the current line
nnoremap gO O<ESC>O<ESC>o
nnoremap go o<ESC>o<ESC>O
" Swap words
nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>
" Append line after next line
nnoremap gl ddpkJ
" Cut line and paste before this line
nnoremap gL DO<ESC>p0d^==

" Move lines and visual selections up and down
nnoremap <C-Down> :m+<CR>==
nnoremap <C-Up> :m-2<CR>==
inoremap <C-Down> <Esc>:m+<CR>==gi
inoremap <C-Up> <Esc>:m-2<CR>==gi
vnoremap <C-Down> :m'>+<CR>gv=gv
vnoremap <C-Up> :m-2<CR>gv=gv

" Change case of whole word
nnoremap <leader>u guiw
nnoremap <leader>U gUiw

" Remove spaces at the end of the line
nnoremap <leader>S :%s/[ \t]\+$//g<cr>

" Select what you just pasted
nnoremap <expr> gV    "`[".getregtype(v:register)[0]."`]"

" Experimenting with alternative keys for cursor movement
" nnoremap ñ <C-f>
" nnoremap Ñ <C-b>
" nnoremap h <C-b>
" nnoremap m j
" nnoremap j h
" nnoremap <C-w><C-j> <C-w><C-h>
" nnoremap <C-w><C-m> <C-w><C-o>
" nnoremap <C-j> <C-PageUp>
" nnoremap <C-l> <C-PageDown>

nnoremap <CR> gea<CR><ESC>d^

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell checker
set spelllang=es,en_us
set spellsuggest=10
" Start spell checker
map <C-F5> :setlocal spell<CR>
" Show suggestions
map <M-F5> z=
imap <M-F5> <ESC>z=

nmap <c-s> :setlocal spell spelllang=es<cr>
nmap <c-g> :setlocal spell spelllang=en_us<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Abbreviations
iabbr fi if
iabbr teh the
iabbr Teh The
iabbr pritn print
iabbr urrlib urllib
iabbr urrlib2 urllib2

iabbr ^2 ²
iabbr ... …

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Iron
if has('nvim')
	" deactivate default mappings
	let g:iron_map_defaults = 0
	let g:iron_repl_open_cmd = 'vsplit'

	" define custom mappings for the python filetype
	augroup ironmapping
		autocmd!
		autocmd Filetype python nmap <buffer> <Leader>t <Plug>(iron-send-motion)
		autocmd Filetype python vmap <buffer> <Enter> <Plug>(iron-send-motion)
		autocmd Filetype python nmap <buffer> <Leader>p <Plug>(iron-repeat-cmd)
	augroup END
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Close hidden buffers
function! CloseHiddenBuffers()
	" figure out which buffers are visible in any tab
	let visible = {}
	for t in range(1, tabpagenr('$'))
		for b in tabpagebuflist(t)
			let visible[b] = 1
		endfor
	endfor
	" close any buffer that's loaded and not visible
	for b in range(1, bufnr('$'))
		if bufloaded(b) && !has_key(visible, b)
			exe 'bd ' . b
		endif
	endfor
endfun
nnoremap <Leader>C :call CloseHiddenBuffers()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Swicth mouse on/off
function! ToggleMouse()
	if &mouse == 'a'
		set mouse=
		echo "Mouse usage disabled"
	else
		set mouse=a
		echo "Mouse usage enabled"
	endif
endfunction
nnoremap <Leader>m :call ToggleMouse()<CR>
set mouse=a                             " Mouse activate

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Chage to UPPER CASE, lower case and Tittle Case (http://vim.wikia.com/wiki/Switching_case_of_characters)
function! TwiddleCase(str)
	if a:str ==# toupper(a:str)
		let result = tolower(a:str)
	elseif a:str ==# tolower(a:str)
		let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
	else
		let result = toupper(a:str)
	endif
	return result
endfunction
vnoremap ~ ygv"=TwiddleCase(@")<CR>Pgv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree and NERDTreeTabs
" let NERDTreeIgnore = ['\.pyc$']

map <Leader>f <plug>NERDTreeTabsToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimwiki
let g:vimwiki_camel_case=0
let g:vimwiki_list=[
					\{'path': '~/.vimwiki', 'path_html': '~/vimwiki/html'},
					\{'path': '~/Privado/vimwiki/private', 'path_html': '~/Privado/vimwiki/private/html'},
					\{'path': '~/Dropbox/vimwiki/public', 'path_html': '~/Dropbox/Public/wiki/html'}]
let g:vimwiki_browsers=['/usr/bin/firefox']
