snippet subclass "class inheritance" !b
class ${1:Name}(${2:Parent}):

    def __init__(self, *args, **kwargs):
        super(${3:Name}, self).__init__(*args, **kwargs)
endsnippet

snippet subfunc "class inheritance function" !b
def ${1:func}(self, *args, **kwargs):
    super(${2:Name}, self).${3:func}(*args, **kwargs)
endsnippet

snippet main "main" !b
#!/usr/bin/env python3

import sys


def main():

    return 0


if __name__ == '__main__':
    sys.exit(main())
endsnippet

snippet argparse "parse program parameters" !b
import argparse


__VERSION__ = '0.0.1'


def run(args):
    print(args.option)


def args_parse():
    parser = argparse.ArgumentParser(prog='program_name',
                                     description='Program description.')
    parser.add_argument('--version', action='version', version=__VERSION__)
    subparsers = parser.add_subparsers(dest='parser')
    subparsers.required = True

    run_parser = subparsers.add_parser('run')
    run_parser.add_argument('param1', help='param one')
    run_parser.add_argument('param2', help='param two')
    run_parser.add_argument('-o', '--option', required=False, default=0,
                            type=int, help='option')
    run_parser.add_argument('--verbose', required=False, default=False,
                            action='store_true')
    run_parser.set_defaults(func=run)

    return parser.parse_args()


def main():
    args = args_parse()
    args.func(args)

    return 0
endsnippet

snippet "thread class" "thread class" !b
import time
import threading
import Thread


stop_event = threading.Event()


class MyThread(Thread):
    def __init__(self, group=None, target=None, name=None, *args, **kwargs):
        super(MyThread, self).__init__(group=group, target=target,
                                       name=name)
        self.args = args
        self.kwargs = kwargs

    def run(self):
        print(self.args)
        print(self.kwargs)

        while not stop_event.is_set():
            time.sleep(5)


my_thread = MyThread()
my_thread.start()

# stop_event.set()

my_thread.join()
endsnippet

snippet "thread func" "thread function" !b
import time
import threading


stop_event = threading.Event()


def thread_func():
    while not stop_event.is_set():
        time.sleep(5)


my_thread = threading.Thread(target=thread_func)
my_thread.start()

# stop_event.set()

my_thread.join()
endsnippet

snippet timestamp "get timestamp"
int(round(time.time() * 1000.0))
endsnippet

snippet "find func" "find files func" !b
import os
import fnmatch

def find(pattern, path):
    result = []
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))

    return result
endsnippet

snippet tobytes "bytes to string"
.encode('utf-8')
endsnippet

snippet tostr "bytes to string"
.decode('utf-8')
endsnippet

snippet "rest get" "requests get JSON with params" !b
r = requests.get(${1:url}, params=${2:payload_dict}, timeout=0.010)
# r.raise_for_status()
# assert r.status_code == requests.codes.ok
# print(r.text)
result = r.json()
endsnippet

snippet "rest post" "requests post data and get JSON" !b
r = requests.post(${1:url}, data=${2:data_dict_or_tuples}, timeout=0.010)
# r.raise_for_status()
# print(r.status_code)
# print(r.text)
result = r.json()
endsnippet
