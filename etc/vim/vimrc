" vim: foldmethod=marker
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim standard commands cheatsheet {{{

" MAP `gi`: go insert mode in the last insert location
" MAP `C-d`, `C-u`: page up, page down
" MAP `C-x C-l`: line completion
" MAP `C-o`, `C-i`: jump back, jump forward (out/in)
" MAP `ds'`, `ds"`: remove quotes (' or ")
" MAP `AMOUNT C-a`: add AMOUNT to number under cursor, if no AMOUNT specified then add one (or cycle through words)
" MAP `AMOUNT C-x`: subtract AMOUNT to number under cursor, if no AMOUNT specified then subtract one (or cycle through words)

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Init {{{

if has('vim_starting')
  set nocompatible
endif

if has('nvim')
  let g:python_host_prog = expand('~/.pyenv/versions/neovim2/bin/python')
  let g:python3_host_prog = expand('~/.pyenv/versions/neovim3/bin/python')
  " To update:
  " $ source ~/.pyenv/versions/neovim2/bin/activate
  " $ pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
  " $ source ~/.pyenv/versions/neovim3/bin/activate
  " $ pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
endif

" Polyglot (should be placed before loading the plugin)
let g:polyglot_disabled = ['markdown']

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug install {{{

if has('nvim')
	let vimplug_exists=expand('~/.local/share/nvim/site/autoload/plug.vim')
else
	let vimplug_exists=expand('~/.vim/autoload/plug.vim')
endif

if !filereadable(vimplug_exists)
  echo "Installing Vim-Plug..."
  echo ""
  if has('nvim')
	  silent !\curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  else
	  silent !\curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  endif
  let g:not_finish_vimplug = "yes"

  autocmd VimEnter * PlugInstall
endif

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Install plugins {{{

if has('nvim')
  call plug#begin(expand('~/.local/share/nvim/plugged'))
else
  call plug#begin(expand('~/.vim/plugged'))
endif

" Colorscheme
Plug 'freeo/vim-kalisi'
" Plug 'altercation/vim-colors-solarized'
" Plug 'vim-scripts/BusyBee'

" NERDTree
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'

" " Fuzzy find
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'

" Telescope
if has('nvim')
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'
  Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release && cmake --build build --config Release && cmake --install build --prefix build' }
endif

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" EasyMotion
Plug 'easymotion/vim-easymotion'

" " quick-scope
" Plug 'unblevable/quick-scope'

" Comments
Plug 'tpope/vim-commentary'
" Surround
Plug 'tpope/vim-surround'
" Show indent lines
Plug 'Yggdroot/indentLine'

" Multicursor
Plug 'terryma/vim-multiple-cursors'

" Git commands
Plug 'tpope/vim-fugitive'
" Git diff in sign column
Plug 'airblade/vim-gitgutter'

" EditorConfig coding style configuration
Plug 'editorconfig/editorconfig-vim'

" " Languages support
" Plug 'sheerun/vim-polyglot'

" " Dart tools
" Plug 'dart-lang/dart-vim-plugin'

" Autoclose delimiters
Plug 'Raimondi/delimitMate'

" Toggle words between pairs or lists of related words
Plug 'zef/vim-cycle'

" UltiSnips
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Language support
if has('nvim')
  " Installer
  Plug 'williamboman/mason.nvim'
  Plug 'williamboman/mason-lspconfig.nvim'

  " LSP
  Plug 'neovim/nvim-lspconfig'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'hrsh7th/cmp-cmdline'
  Plug 'hrsh7th/nvim-cmp'

  " Snippets
  "
  " luasnip
  " Plug 'L3MON4D3/LuaSnip'
  " Plug 'saadparwaiz1/cmp_luasnip' " Snippets source for nvim-cmp
  "
  " ultisnips
  " Plug 'SirVer/ultisnips'
  " Plug 'honza/vim-snippets'

  " Treesitter
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Jupyter Notebook integration
Plug 'goerz/jupytext.vim'

" REPL
Plug 'jpalardy/vim-slime'
Plug 'klafyvel/vim-slime-cells'

" Autoformat
" Plug 'Chiel92/vim-autoformat'
Plug 'psf/black', { 'branch': 'stable' }

" Markdown
Plug 'godlygeek/tabular'
Plug 'gabrielelana/vim-markdown'

" Writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" VimWiki
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }

" codi.vim - interactive scratchpad
Plug 'metakirby5/codi.vim'

" XXX Load last
" Icons for NERDTree, Airline,…
Plug 'ryanoasis/vim-devicons'

call plug#end()

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basic {{{

set updatetime=1000

let mapleader=','

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

set hidden                             " Enable hidden buffers

set undofile                           " Maintain undo history between sessions
set undodir=~/.vim/undodir

" Wild menu
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildmenu
set wildmode=list:longest,full

" Shell
if filereadable("/usr/bin/fish")
  set shell=/usr/bin/fish
elseif filereadable("/usr/local/bin/fish")
  set shell=/usr/local/bin/fish
endif
" set autochdir

" Swicth mouse on/off
function! ToggleMouse()
	if &mouse == 'a'
		set mouse=
		echo "Mouse usage disabled"
	else
		set mouse=a
		echo "Mouse usage enabled"
	endif
endfunction
" MAP `,m`: switch mouse on/off
nnoremap <Leader>m :call ToggleMouse()<CR>

set mouse=a                            " Mouse activate
" FIXME This break copy&paste with visual blocks:
set clipboard+=unnamedplus             " Copy&Paste from clipboard

" function YankBlock(vmode)
"   echo vmode
" endfunction

" " vnoremap <silent> y :call YankBlock()
" vnoremap y :call YankBlock(visualmode())<CR>
" " vnoremap y if mode() == "CTRL-V" | echo "block" :call YankBlock()<CR>
" " vnoremap y :echo mode()<CR>

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Appearance {{{

colorscheme kalisi

set background=dark

if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

if (has("termguicolors"))
  set termguicolors
endif

set cmdheight=2                        " Two lines for commands
set signcolumn=yes                     " Always show signcolumns

set cursorline                         " Highlight cursor line
set number                             " Line number
set relativenumber                     " Relative line numbers

" Use to improve scroll speed
" set lazyredraw
" set regexpengine=1

" Switch cursor line
" MAP `,l`: switch cursor line on/off
nmap <leader>l :set cursorline!<CR>
" Remove line numbers
" MAP `,n`: switch line numbers on/off
nmap <leader>n :set number!<CR>
" Switch relative line numbers
" MAP `,n`: switch relative line numbers on/off
nmap <leader>r :set relativenumber!<CR>

set scrolloff=3                        " Always see next 3 lines

if exists("*fugitive#statusline")
  set statusline+=%{fugitive#statusline()}
endif

" Treesitter -- not working
" set statusline+=%{nvim_treesitter#statusline(90)}

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1

let g:airline#extensions#virtualenv#enabled = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

if !exists('g:airline_powerline_fonts')
  let g:airline#extensions#tabline#left_sep = ' '
  let g:airline#extensions#tabline#left_alt_sep = '|'
  let g:airline_left_sep          = '▶'
  let g:airline_left_alt_sep      = '»'
  let g:airline_right_sep         = '◀'
  let g:airline_right_alt_sep     = '«'
  let g:airline#extensions#branch#prefix     = '⤴' "➔, ➥, ⎇
  let g:airline#extensions#readonly#symbol   = '⊘'
  let g:airline#extensions#linecolumn#prefix = '¶'
  let g:airline#extensions#paste#symbol      = 'ρ'
  let g:airline_symbols.linenr    = '␊'
  let g:airline_symbols.branch    = '⎇'
  let g:airline_symbols.paste     = 'ρ'
  let g:airline_symbols.paste     = 'Þ'
  let g:airline_symbols.paste     = '∥'
  let g:airline_symbols.whitespace = 'Ξ'
else
  let g:airline#extensions#tabline#left_sep = ''
  let g:airline#extensions#tabline#left_alt_sep = ''

  " powerline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
endif

" Don't show indent lines in some types
let g:indentLine_fileTypeExclude = ['text', 'help', 'terminal']
let g:indentLine_bufNameExclude = ['NERD_tree.*', 'term:.*']

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Controls {{{

" Disable F1 key
inoremap <F1> <Nop>
nnoremap <F1> <Nop>
vnoremap <F1> <Nop>

" Disable Q key
nnoremap Q <Nop>

" MAP `-`: enter command mode
nnoremap - :

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Movements {{{

" MAP `jklñ`: left, down, up, right
nnoremap ñ l
nnoremap l k
nnoremap k j
nnoremap j h
vnoremap ñ l
vnoremap l k
vnoremap k j
vnoremap j h

" MxP `ARROW KEYS`: move in visual lines
" imap <up> <C-O>gk
" imap <down> <C-O>gj
" nmap <up> gk
" nmap <down> gj
" vmap <up> gk
" vmap <down> gj
" Another version (from https://gist.github.com/benawad/b768f5a5bbd92c8baabd363b7e79786f)
" noremap <silent> <expr> k (v:count == 0 ? 'gj' : 'j')
" noremap <silent> <expr> l (v:count == 0 ? 'gk' : 'k')

" MAP `C-w jklñ`: go to left, down, up, right panel
nnoremap <C-w>j <C-w><left>
nnoremap <C-w>k <C-w><down>
nnoremap <C-w>l <C-w><up>
nnoremap <C-w>ñ <C-w><right>

" MAP `C-w C-jklñ`: go to left, down, up, right panel
nnoremap <C-w><C-j> <C-w><left>
nnoremap <C-w><C-k> <C-w><down>
nnoremap <C-w><C-l> <C-w><up>
" Not working
nnoremap <C-w><C-ñ> <C-w><right>

" MAP `hh`: beginning of the line
nnoremap hh 0
vnoremap hh 0

" MAP `hj`: first character of the line
nnoremap hj ^
vnoremap hj ^
" MAP `hñ`: end of the line
nnoremap hñ $
vnoremap hñ $

" MAP `gb`: go back
nnoremap gb <C-o>

" Center the line of the cursor
" MAP `,zz`: center de current line in the screen
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>

" EasyMotion
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" MAP `s`: jump anywhere typing two characters and then the label
" " Jump to anywhere you want with minimal keystrokes, with just one key binding.
" " `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)

" Turn on case-insensitive feature
let g:EasyMotion_smartcase = 1

" " quick-scope

" " Trigger a highlight in the appropriate direction when pressing these keys:
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" let g:qs_max_chars=150

" hi link QuickScopePrimary IncSearch
" hi link QuickScopeSecondary ErrorMsg

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding {{{

" set foldmethod=syntax
" set foldmethod=indent
set foldnestmax=2

if has('nvim')
  " Treesitter
  set foldmethod=expr
  set foldexpr=nvim_treesitter#foldexpr()
endif

" MAP `zR`: open all folds
" MAP `zM`: close all folds
" MAP `zi`: toggle folds

" From: https://vim.fandom.com/wiki/Folding#Mappings_to_toggle_folds
" MAP `ENTER`: open/close folds (in visual mode create a fold)
nnoremap <silent> <CR> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <CR> zf

" MAP `,O`: open recursively all folds contained in the current fold
nnoremap <leader>O zczA
" nnoremap <leader>O ]z<shift-v>[zzO

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs {{{

" Move between tabs
" MAP `C-h`, `C-j`: move between tabs
nnoremap <C-h> gT
nnoremap <C-j> gt
" Move tabs
" MAP `A-PageUp`, `A-PageUp`: move tab
nnoremap <silent> <A-PageUp> :execute 'silent! tabmove ' . (tabpagenr()-2)<CR>
nnoremap <silent> <A-PageDown> :execute 'silent! tabmove ' . tabpagenr()<CR>
" Create tab
" MAP `C-t`: new tab
nmap <C-t> :tabnew<CR>
imap <C-t> <Esc>:tabnew<CR>

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search {{{

set showmatch
set hlsearch                            " Highligh search result
set incsearch                           " Incremental search
set ignorecase                          " Ignore case
set smartcase                           " Smartcase

" Clear search highlight
" MAP `,s`: clear search
nmap <leader>s :nohlsearch<CR>

" " Ag (grep) + fzf
" " MAP `,G`: grep in open buffers
" nnoremap <leader>G :Lines<CR>
" " MAP `\`: grep
" nnoremap \ :Ag<Space>
" " MAP `+`: grep this word
" nnoremap <silent> + :Ag <C-R><C-W><CR>

" Telescope
if has('nvim')
  nnoremap \ <cmd>Telescope live_grep<cr>
  nnoremap + <cmd>Telescope grep_string<cr>
endif

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Visualization {{{

" Show special characters
" MAP `,c`: switch showing special characters on/off
nmap <leader>c :set list!<CR>
set listchars=tab:▸.,trail:.,extends:…,nbsp:.,eol:¬
"highlight NonText ctermfg=8 ctermbg=0  " Invisible character colors
"highlight SpecialKey ctermfg=8 ctermbg=0
match ErrorMsg /\s\+$/                 " Highlight spaces at the end of the line

" Highlight all instances of word under cursor, when idle.
" http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
" MAP `,z`: hightlight all instances of word under cursor, when idle
nnoremap <leader>z :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files {{{

" NERDTree and NERDTreeTabs

let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__', '\.zip$', '\.backup$', '\.tfstate$']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 30
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite,*.zip

" MAP `,f`: open file tree
map <Leader>f <plug>NERDTreeTabsToggle<CR>

" " Don't open NERDTree for saved sessions
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && v:this_session == "" | NERDTree | endif

" Don't open files and other buffers on NerdTree window
" If more than one window and previous buffer was NERDTree, go back to it.
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

" MAP `,p`: show full filename and path
nnoremap <leader>p :echo expand('%:p')<CR>

" Fuzzy open file

" " MAP `,F`: search file
" nnoremap <silent> <leader>F :Files<CR>
" " MAP `,B`: search buffer
" nnoremap <silent> <leader>B :Buffers<CR>

" Telescope
if has('nvim')
  nnoremap <leader>F <cmd>Telescope find_files<cr>
  nnoremap <leader>B <cmd>Telescope buffers<cr>
  " nnoremap <leader>fh <cmd>Telescope help_tags<cr>

lua << EOF
local actions = require("telescope.actions")
require("telescope").setup{
  defaults = {
    mappings = {
      i = {
        ["<esc>"] = actions.close,
        ["<C-u>"] = false
      },
    },
  },
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    }
  }
}

require('telescope').load_extension('fzf')
EOF
endif

" MAP `gF`: open file under cursor in a horizontal split
map gF :wincmd f<CR>
" MAP `gff`: open file under cursor in a new tab
map gff :wincmd gf<CR>

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Snippets {{{

let g:UltiSnipsSnippetDirectories = ['UltiSnips']
let g:UltiSnipsExpandTrigger="<tab>"

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Edition {{{

set tabstop=2                          " Show existing tab with 2 spaces width
set shiftwidth=2                       " When indenting with '>', use 2 spaces width
set expandtab                          " On pressing tab, insert 2 spaces

" MAP `.`: repeat last action and move to the beginning of the edition
map . .`[
" MAP `Y`: copy until the end of the line
nnoremap Y y$

" MAP `,p`: paste yank
vnoremap <leader>p "0p

" Quick macro
" MAP `qq`: start recording macro `q`
" MAP `q`: end recording macro
" MAP `QQ`: run macro `q`
nnoremap QQ @q

" Switch paste mode
" MAP `F2`: switch paste mode on/off
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set noshowmode

" Swap words
" MAP `gw`: swap words
nnoremap <silent> gw "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>:nohlsearch<CR>

" MAP `gl`: append line after next line
nnoremap gl ddpkJ
" MAP `gL`: cut line and paste before this line
nnoremap gL DO<ESC>p0d^==

" MAP `C-Up`,`C-Down`,`C-l`, `C-k`: move line or visual selection up and down
nnoremap <C-Down> :m+<CR>==
nnoremap <C-Up> :m-2<CR>==
inoremap <C-Down> <Esc>:m+<CR>==gi
inoremap <C-Up> <Esc>:m-2<CR>==gi
vnoremap <C-Down> :m'>+<CR>gv=gv
vnoremap <C-Up> :m-2<CR>gv=gv
nnoremap <C-k> :m+<CR>==
nnoremap <C-l> :m-2<CR>==
inoremap <C-k> <Esc>:m+<CR>==gi
inoremap <C-l> <Esc>:m-2<CR>==gi
vnoremap <C-k> :m'>+<CR>gv=gv
vnoremap <C-l> :m-2<CR>gv=gv

" MAP `,S`: remove spaces at the end of the line
nnoremap <leader>S :%s/[ \t]\+$//g<cr>

" MAP `gV`: select what you just pasted
nnoremap <expr> gV    "`[".getregtype(v:register)[0]."`]"

" MAP `,v`: select until end of the line
nnoremap <leader>v v$ho

" nnoremap <CR> gea<CR><ESC>d^

" MAP `,u`, `,U`: change case of whole word
nnoremap <leader>u guiw
nnoremap <leader>U gUiw

" MAP `,"`, `,'`, `,(`, `,[`, `,{`: surround word or visual selection with ", ', (), [] or {}
nmap <leader>" ysiw"
nmap <leader>' ysiw'
vmap <leader>" S"
vmap <leader>' S'
nmap <leader>( ysiw)
nmap <leader>[ ysiw]
nmap <leader>{ ysiw}
vmap <leader>( S)
vmap <leader>[ S]
vmap <leader>{ S}

" MAP `,)`, `,]`: interchange () and []
nmap <leader>) cs[)
nmap <leader>] cs(]

" Chage to UPPER CASE, lower case and Tittle Case
" http://vim.wikia.com/wiki/Switching_case_of_characters
function! TwiddleCase(str)
	if a:str ==# toupper(a:str)
		let result = tolower(a:str)
	elseif a:str ==# tolower(a:str)
		let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
	else
		let result = toupper(a:str)
	endif
	return result
endfunction
" MAP `~`: change between lower case, UPPER CASE and Tittle Case
vnoremap ~ ygv"=TwiddleCase(@")<CR>Pgv

" Remember cursor position
augroup vimrc-remember-cursor-position
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Vmap for maintain Visual Mode after shifting > and <
" Source: https://vim-bootstrap.com/
vmap < <gv
vmap > >gv

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Coding {{{

" Python with virtualenv support
" py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF

if has('nvim')
""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treesitter
lua << EOF
require'nvim-treesitter.configs'.setup {
    -- A list of parser names, or "all"
    ensure_installed = { "python", "terraform", "javascript", "solidity" },

    -- Install parsers synchronously (only applied to `ensure_installed`)
    sync_install = false,

    -- Automatically install missing parsers when entering buffer
    -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
    auto_install = true,

    -- List of parsers to ignore installing (for "all")
    -- ignore_install = { "javascript" },

    ---- If you need to change the installation directory of the parsers (see -> Advanced Setup)
    -- parser_install_dir = "/some/path/to/store/parsers", -- Remember to run vim.opt.runtimepath:append("/some/path/to/store/parsers")!

    highlight = {
      -- `false` will disable the whole extension
      enable = true,

      -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
      -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
      -- the name of the parser)
      -- list of language that will be disabled
      -- disable = { "c", "rust" },
      -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
      -- disable = function(lang, buf)
      --     local max_filesize = 100 * 1024 -- 100 KB
      --     local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
      --     if ok and stats and stats.size > max_filesize then
      --         return true
      --     end
      -- end,

      -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
      -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
      -- Using this option may slow down your editor, and you may see some duplicate highlights.
      -- Instead of true it can also be a list of languages
      additional_vim_regex_highlighting = false,
    },

    indent = {
      enable = true,
      disable = {"python",},
      }
  }
EOF

""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LSP
set completeopt=menu,menuone,noselect

lua << EOF
  -- Set up nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Set up lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities()
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  -- require('lspconfig')['<YOUR_LSP_SERVER>'].setup {
  --   capabilities = capabilities
  -- }

  require("mason").setup()
  require("mason-lspconfig").setup {
      ensure_installed = { "pylsp", "terraformls", "tsserver", "solc"},
  }

  require("lspconfig").pylsp.setup {}
  require("lspconfig").terraformls.setup {}
  require("lspconfig").tsserver.setup {}
  require("lspconfig").solc.setup {}
EOF
""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Telescope
  nnoremap <leader>R <cmd>lua require('telescope.builtin').lsp_references()<cr>
  nnoremap <leader>S <cmd>lua require('telescope.builtin').lsp_document_symbols()<cr>
  nnoremap <leader>W <cmd>lua require('telescope.builtin').lsp_workspace_symbols()<cr>
  nnoremap <leader>E <cmd>lua require('telescope.builtin').diagnostics()<cr>
  nnoremap <leader>T <cmd>lua require('telescope.builtin').treesitter()<cr>
endif

" MAP `<F9>`: format with Black
nnoremap <F9> :Black<CR>
" Auto-format on save:
" autocmd BufWritePre *.py execute ':Black'

" From George in Vim Telegram Group
function! JsonPrettyTool()
 :%!python -c "import json, sys, collections; print json.dumps(json.load(sys.stdin, object_pairs_hook=collections.OrderedDict), indent=4,ensure_ascii=False).encode('utf-8')"
 :set ft=json
endfunction

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" REPL {{{

" vim-slime
let g:slime_target = "tmux"

" For IPython
" let g:slime_cell_delimiter = "^\\s*##"
" For Markdown
let g:slime_cell_delimiter = "^```*"

let g:slime_default_config = {"socket_name": get(split($TMUX, ","), 0), "target_pane": ":.1"}
let g:slime_dont_ask_default = 1
let g:slime_bracketed_paste = 1
let g:slime_no_mappings = 1
nmap <c-c>v <Plug>SlimeConfig

" vim-slime-cells
nmap <c-c><c-c> <Plug>SlimeCellsSendAndGoToNext
nmap <c-c><c-k> <Plug>SlimeCellsNext
nmap <c-c><c-l> <Plug>SlimeCellsPrev

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell checker {{{
set spelllang=es,en_us
set spellsuggest=10
" Start spell checker

" MAP `M-F5`: show spell checker suggestions
map <M-F5> z=
imap <M-F5> <ESC>z=

" MAP `M-s`: show spell checker suggestions
map <M-s> z=
imap <M-s> <ESC>z=

" MAP `C-s`: activate spell checker for Spanish
nmap <c-s> :setlocal spell spelllang=es<cr>
" MAP `C-g`: activate spell checker for English
nmap <c-g> :setlocal spell spelllang=en_us<cr>

" MAP `M-F6`: deactivate spell checker
nmap <M-F6> :setlocal nospell

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Abbreviations {{{
iabbr fi if
iabbr teh the
iabbr Teh The
iabbr pritn print
iabbr urrlib urllib
iabbr urrlib2 urllib2

iabbr ^2 ²
iabbr ... …

iabbr 80- -------------------------------------------------------------------------------- 
iabbr 80= ================================================================================
iabbr 80# ################################################################################
iabbr 80' ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
iabbr 80" """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

iab todaydate <c-r>=strftime("%Y-%m-%d")<CR>

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom settings for filetypes {{{

" Bash (disable fi -> if)
autocmd FileType sh
      \ silent! unabbreviate fi |
      \ setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab iskeyword-=.,#

" Comments in JSON
autocmd FileType json syntax match Comment +\/\/.\+$+

" *.md files -> Markdown
autocmd BufEnter,BufRead,BufNewFile *.md set filetype=markdown

" Bash (disable fi -> if)
autocmd FileType solidity
      \ setlocal shiftwidth=4 tabstop=4 softtabstop=4 expandtab iskeyword-=.,#

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Writing {{{

" MAP `F3`: count words of the document
map <F3> :w !wc -w<CR>

" MAP `,=`: underline word with "=" (Markdown)
nnoremap <leader>= YpVr=
" MAP `,-`: underline word with "-" (Markdown)
nnoremap <leader>- YpVr-

" Goyo
" MAP `:Goyo`: distraction-free writing

function! s:goyo_enter()
  NERDTreeSteppedClose
  set noshowmode
  set noshowcmd
  " set scrolloff=999
  nnoremap <buffer> l gk
  nnoremap <buffer> k gj
  nnoremap <buffer> <up> gk
  nnoremap <buffer> <down> gj
  Limelight
  " ...
endfunction

function! s:goyo_leave()
  set showmode
  set showcmd
  " set scrolloff=5
  Limelight!
  " ...
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimwiki {{{
" MAP `,ww`: open default VimWiki
" MAP `,wt`: open default VimWiki in a new tab
" MAP `,ws`: select VimWiki to open
" MAP `,wd`: delete current VimWiki file
" MAP `,wr`: rename current VimWiki file
let g:vimwiki_camel_case=0
" let g:vimwiki_folding='list'
let g:vimwiki_list=[
					\{'path': '~/.vimwiki', 'path_html': '~/vimwiki/html'},
					\{'path': '~/Privado/vimwiki/private', 'path_html': '~/Privado/vimwiki/private/html'},
					\{'path': '~/Dropbox/vimwiki/public', 'path_html': '~/Dropbox/Public/wiki/html'}]
let g:vimwiki_browsers=['/usr/bin/firefox']

" To disable map of '-'
let g:vimwiki_key_mappings =
  \ {
  \ 'headers': 0,
  \ }

function SetVimWikiOptions()
  " Change folding mapping to <space>
  nnoremap <silent><buffer> <space> @=(foldlevel('.')?'za':"\<Space>")<CR>
  vnoremap <buffer> <space> zf
endfunction
autocmd Filetype vimwiki call SetVimWikiOptions()

" }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimrc {{{

" From: https://github.com/CalinLeafshade/dots/blob/master/nvim/.config/nvim/init.vim
" MAP `,ev`: edit vimrc
nnoremap <leader>ev :vsp $MYVIMRC<CR>
" MAP `,sv`: run vimrc
nnoremap <leader>sv :source $MYVIMRC <bar> :doautocmd BufRead<CR>

" }}}
